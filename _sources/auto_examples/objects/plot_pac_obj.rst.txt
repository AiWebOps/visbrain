.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_objects_plot_pac_obj.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_objects_plot_pac_obj.py:


Phase-Amplitude Coupling (PAC)  object
======================================

The PAC measure the degree of coupling between the phase of slow oscillations
and the amplitude of fatser oscillations. To compute PAC, you'll need to
install the tensorpac package (see https://github.com/EtienneCmb/tensorpac).

The PacmapObj can be use to visualize three things :

    * The comodulogram of amplitude frequencies as a function of low frequency
      phase.
    * The evolution of coupling across time for several frequency phase
    * The evolution of coupling across time for several frequency amplitude



.. image:: /auto_examples/objects/images/sphx_glr_plot_pac_obj_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    # =============================================================================
    #                              Comodulogram
    # =============================================================================

    Phase Amplitude Coupling object defined
        Extract phases (n_pha=54) and amplitudes (n_amps=80)
        true PAC estimation using ndPac (Ozkurt et al. 2012)

    # =============================================================================
    #                         Optimal phase frequency
    # =============================================================================

    Phase Amplitude Coupling object defined
        Extract phases (n_pha=54) and amplitudes (n_amps=1)
        true PAC estimation using ndPac (Ozkurt et al. 2012)

    # =============================================================================
    #                         Optimal amplitude frequency
    # =============================================================================

    Phase Amplitude Coupling object defined
        Extract phases (n_pha=1) and amplitudes (n_amps=80)
        true PAC estimation using ndPac (Ozkurt et al. 2012)





|


.. code-block:: default

    import numpy as np

    from tensorpac.signals import pac_signals_wavelet

    from visbrain.objects import PacmapObj, SceneObj

    """Generate artificillly coupled signals :
    - First coupling between 10hz phase with a 80hz amplitude
    - Second coupling between 5hz phase with a 100hz amplitude

    The final signal is the concatenation of both
    """
    sf = 1024.
    s_1 = pac_signals_wavelet(sf=sf, f_pha=10., f_amp=80., n_epochs=1,
                              n_times=5000)[0]
    s_2 = pac_signals_wavelet(sf=sf, f_pha=5., f_amp=100., n_epochs=1,
                              n_times=5000)[0]
    sig = np.c_[s_1, s_2]

    sc = SceneObj(size=(1200, 600))

    print("""
    # =============================================================================
    #                              Comodulogram
    # =============================================================================
    """)
    pac_obj_como = PacmapObj('como', sig, sf=sf, f_pha=(2, 30, 1, .5),
                             f_amp=(60, 150, 10, 1), interpolation='bicubic')
    sc.add_to_subplot(pac_obj_como, row=0, col=0, zoom=.9, title='Comodulogram')

    print("""
    # =============================================================================
    #                         Optimal phase frequency
    # =============================================================================
    """)
    pac_pha_como = PacmapObj('como', sig, sf=sf, f_pha=(2, 30, 1, .5),
                             f_amp=[70., 110.], n_window=500, cmap='plasma')
    sc.add_to_subplot(pac_pha_como, row=0, col=1, zoom=.9,
                      title='Optimal phase frequency')

    print("""
    # =============================================================================
    #                         Optimal amplitude frequency
    # =============================================================================
    """)
    pac_amp_como = PacmapObj('como', sig, sf=sf, f_pha=[2, 20],
                             f_amp=(60, 150, 10, 1), n_window=500, cmap='inferno')
    sc.add_to_subplot(pac_amp_como, row=0, col=2, zoom=.9,
                      title='Optimal amplitude frequency')
    sc.preview()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.990 seconds)


.. _sphx_glr_download_auto_examples_objects_plot_pac_obj.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_pac_obj.py <plot_pac_obj.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_pac_obj.ipynb <plot_pac_obj.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
