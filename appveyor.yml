environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.1"
      PYTHON_ARCH: "64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds.
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./ci/appveyor/install.ps1"
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "python -m pip install -U pip"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"

  - "%CMD_IN_ENV% pip install vispy"
  - "%CMD_IN_ENV% pip install mne"
  - "%CMD_IN_ENV% pip install nibabel"
  - "%CMD_IN_ENV% pip install setuptools"
  - "%CMD_IN_ENV% pip install PyOpenGL PyOpenGL_accelerate"
  - "%CMD_IN_ENV% pip install codecov"
  - "%CMD_IN_ENV% pip install pytest pytest-cov"
  - "%CMD_IN_ENV% pip install -r requirements.txt"

build_script:
  # Build the compiled extension
    - "%CMD_IN_ENV% python setup.py build"

test_script:
  # Run the project tests
  - "%CMD_IN_ENV% py.test --cov --verbose"

# after_test:
#   # This step builds your wheels.
#   # Again, you only need build.cmd if you're building C extensions for
#   # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
#   # interpreter
#   - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

# artifacts:
#   # bdist_wheel puts your built wheel in the dist directory
#   - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.